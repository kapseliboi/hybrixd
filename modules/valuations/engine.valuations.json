{
  "engine":"valuations",
  "name":"Querries the valuation of 1 currency in another.",
  "module":"valuations",
  "cron":60,
  "refreshTime":60,
  "sources" : {
    "EUCentralBank" : {
      "notes" : "European central bank for fiat-exchange rates: https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml",
      "qrtz":"parseEUCentralBank",
      "parsing" : "xml",
      "url" : "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"
    },
    "coinbase" : {
      "notes" : "coinbase: https://developers.coinbase.com/api/v2#exchange-rates",
      "url" : "https://api.coinbase.com/v2/exchange-rates"
    },
    "binance" : {
      "notes" : "https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md",
      "url" : "https://api.binance.com/api/v1/ticker/price"
    },
    "hitbtc_symbols" : {
      "notes" : "hitbtc: https://api.hitbtc.com/",
      "url" : "https://api.hitbtc.com/api/2/public/symbol"
    },
    "hitbtc_prices" : {
      "notes" : "hitbtc: https://api.hitbtc.com/",
      "url" : "https://api.hitbtc.com/api/2/public/ticker"
    },
    "uni_swap" : {
      "url": "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2",
      "data" : "{\"query\":\"{\\n  pairs(first: 1000) {\\n    token0 { symbol }\\n    token1 { symbol }\\n    token0Price\\n  }\\n}\\n\",\"variables\":null}",
      "method": "POST",
      "qrtz":"parseUniSwap"
    }
  },
  "quartz" : {
    "parseTomoDex" : [
      "tran .data[]{price:=.askPrice+.bidPrice, from:.pair.pairName, to: .pair.pairName}",
      "with [].from [splt,'/'] [pick,0] [flow,{ETH:2,TOMO:2},1] [push,'TOMO.',0]",
      "with [].to [splt,'/'] [pick,1] [flow,{ETH:2,TOMO:2},1] [push,'TOMO.',0]",
      "with [].price math /(10^7*2)"
    ],
    "parseEUCentralBank" :[
      "tran '.gesmes:Envelope.Cube[0].Cube[0].Cube[]{from:EUR,to:.attributes.currency,price:.attributes.rate}'"
    ],
    "parseUniSwap" :[
      "tran .data.pairs[]{from:.token0.symbol,to:.token1.symbol,price:.token0Price}",
      "with [].price math '^-1'",
      "with [].from [flow,WETH,1,2] [done,ETH] [push,'ETH.',0]",
      "with [].to [flow,WETH,1,2] [done,ETH] [push,'ETH.',0]"
    ],

    "cron" : [
      "# check if prices were recently updated",
      "with timeNow date now",
      "peek local::pricesTimestamp",
      "ship 2 1 1",
      "data 0",
      "math +$refreshTime",
      "math -$timeNow",
      "ship 1 1 @refreshValuations",
      "done",
      "@refreshValuations",
      "peek sources",
      "each handleSource",
      "with .symbols rout /a",
      "with .rates peek local::prices",
      "func parse",
      "poke local::prices",
      "date now",
      "poke local::pricesTimestamp"
    ],

    "handleSource" : [
      "poke source ${.key}",
      "poke qrtzFunction ${.value.qrtz} none",
      "poke parsing ${.value.parsing} json",
      "poke url ${.value.url}",
      "have .value.data 1 4",
      "data '${.value.data}'",
      "curl POST $url {} {parsing:$parsing} @transform 3",
      "jump 2",
      "curl ${.value.url} {} {parsing:$parsing} @transform 1",
      "logs 'Failed to retrieve data from $source'",
      "done []",
      "@transform",
      "flow qrtzFunction none 3 1",
      "call $qrtzFunction",
      "with [].source peek source"
    ],
    "rate/from/to/amount=1/mode=median" : [
      "data {source: '$from', target:'$to', amount:'$amount', mode: '$mode',  prices: $local::prices}",
      "func rate",
      "flow mode meta 2 1",
      "math 'round($,18)'"
    ],
    "list" : [
      "have local::symbols 2 1",
      "done ['usd','eur','gbp','cad','nzd','jpy','cny','aud','krw','huf','pln','ron','sek','chf','isk','nok','hrk','rub','try','brl','hkd','idr','ils','inr','mxn','myr','php','sgd','thb','zar']",
      "peek local::symbols"
    ]
  },
  "router" : {
    "_help" : "Valuation engine for calculating price conversion rates.",
    "list" : "List available symbols.",
    "rate": {
      "_help" : "Calculate a valuation using a multi-currency rate table.",
      "_ref" : {
        "_list" : "Source_Symbol",
        "_sample": "btc",
        "_ref" : {
          "_list" : "Target_Symbol",
          "_sample" : "usd",
          "_this" : "Retrieve the median exchange-rate for one coin in another coin.",
          "_ref" : {
            "_list" : "Amount",
            "_sample" : "10",
            "_this" : "Retrieve the median exchange-rate for a given amount of one coin in another coin.",
            "max" : "Retrieve the highest exchange-rate data for a given amount of one coin in another coin.",
            "median" : "Retrieve the median exchange-rate data for a given amount of one coin in another coin.",
            "min" : "Retrieve the lowest exchange-rate data for a given amount of one coin in another coin.",
            "meta" : "Retrieve extended exchange-rate data."
          }
        }
      }
    }
  }
}
