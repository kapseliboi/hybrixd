{
  "engine" : "allocation",
  "name" : "Allocation management engine",
  "cache" : 60000,
  "timeout" : 120000,
  "cron" : 30,
  "defaultStatPurgeTime" : 172800,
  "storageFactor" : 8,
  "accountIdRegex" : "^[a-zA-Z0-9]{44}$",
  "supplyOverrideSymbols" : {
    "hy" : "tomo.hy"
  },
  "permissions":{
  "nodeKeys" : true
  },
  "expose" : {
    "deal" : ["push","getAddressAccount","doRebalancePair","securityReserveAccountLock","listPair"]
  },
  "conf" : {
    "enabled" : {"default": false,"type": "boolean", "requiresRestart": true},
    "liquidityPercentage" : {"default":15},
    "securitySymbol" : {"default":"hy"},
    "securityTransferFee" : {"default":"0.5"},
    "securityContractFee" : {"default":"0.001"},
    "securityRiskFactor" : {"default":"2"},
    "securityReleaseCron" : {"default":"1"},
    "securityMinimalDeposit" : {"default":10},
    "allocationBalanceCacheTime" : {"default":600},
    "allocationAddressCacheTime" : {"default":86400}
  },
  "quartz" : {
    "cron" : [
      "time 150000",
      "call cron_10m",
      "call cronCompilePairStats"
    ],
    "cron_10m" : [
      "time 150000",
      "with timeNow date now",
      "peek local::cron10m 0",
      "true '$timeNow > ($ + 300)' 2 1",
      "done",
      "poke local::cron10m $timeNow",
      "logs 'cron -> running regular tasks (10m)'",
      "call cronCompilePairList",
      "call cronUnlockReserves",
      "call cronCleanPairStats"
   ],
   "cronUnlockReserves" : [
      "time 150000",
      "call account/list",
      "each cronUnlockAccountReserve"
    ],
    "cronUnlockAccountReserve" : [
      "call securityReserveAccountLock/${.value}/cron"
    ],
    "cronCompilePairList" : [
      "time 60000",
      "call pairListCompiler",
      "poke local::pairlist"
    ],
    "pairListCompiler/accountID" : [
      "peek local::accounts {}",
      "regx accountID '$accountIdRegex' @single @all",
      "#TODO fix silent failure for wrong accountIDs",
      "@all",
      "tran {:*}.pairs{*:} @finalize 1",
      "fail 'Could not retrieve pairs'",
      "@single",
      "tran .${accountID}.pairs{*:} @finalize 1",
      "fail 'Could not retrieve pairs for $accountID'",
      "@finalize",
      "flat",
      "uniq",
      "sort"
    ],

    "cronCompilePairStats" : [
      "time 60000",
      "peek local::accounts {}",
      "# first prepare a unique pair array",
      "each getPairs",
      "flat",
      "with getAccounts [data,$] [tran,.[0]]",
      "with getPairs [data,$] [pick,1] [flat] [uniq]",
      "with getPairsSize [data,$getPairs] [size]",
      "peek local::compilePairStatCount 0",
      "with pairSelect [peek,local::compilePairStatLoopB,0] [have,getPairs[$],2,1] [data,0] [peek,getPairs[$]]",
      "with count [data,$] [math,+1] [true,>=$getPairsSize,1,2] [done,0]",
      "poke local::compilePairStatCount $count",
      "peek local::accounts {}",
      "call getPairStats/$pairSelect",
      "tran .[$pairSelect] 3 1",
      "warn 'Failing to save pairstats for ${pairSelect}!'",
      "fail 'Failing to save pairstats for ${pairSelect}!'",
      "poke local::pairstats[$pairSelect]",
      "done { '$pairSelect' : $ }"
    ],
    "cronCleanPairStats" : [
      "peek local::pairstats",
      "each staleStatsPairsExclude",
      "excl null",
      "poke local::pairstats"
    ],
    "staleStatsPairsExclude" : [
      "poke stats ${.value}",
      "with timenow date now",
      "tran .value.updated 1 @stale",
      "true '$ > $timenow + $defaultStatPurgeTime' @stale 1",
      "done $stats",
      "@stale",
      "done null"
    ],
    "getPairs" : [
      "tran .value.pairs",
      "flat",
      "tran .[0]"
    ],
    "getPairStats/pair" : [
      "time 120000",
      "with symbols [data,$pair] [splt,':']",
      "with fromBase peek symbols[0]",
      "with toSymbol peek symbols[1]",
      "poke dataObject",
      "# calculate sufficiency and liquidity values",
      "call getCalcStats/max/securityDepositBalances/$pair/$conf::securitySymbol",
      "rout /e/valuations/rate/$conf::securitySymbol/$fromBase/$ 2 1",
      "fail 'Could not determine valuation of risk sufficiency!",
      "math '/ $conf::securityRiskFactor'",
      "poke sufficiencyRisk",
      "peek dataObject",
      "call getCalcStats/max/balances/$pair/$toSymbol",
      "rout /e/valuations/rate/$toSymbol/$fromBase/$ 2 1",
      "fail 'Could not determine valuation of pair sufficiency!",
      "math '* ($conf::liquidityPercentage / 100)'",
      "poke sufficiency",
      "with sufficiency [true,'<$sufficiencyRisk',2] [data,$sufficiencyRisk] [form,$storageFactor]",
      "peek dataObject",
      "call getCalcStats/add/balances/$pair/$toSymbol",
      "true '> 0' 1 2",
      "rout /e/valuations/rate/$toSymbol/$fromBase/$",
      "form $storageFactor",
      "poke liquidity",
      "with sufficiency [true,'<$liquidity',2] [data,$liquidity] [form,$storageFactor]",
      "# calculate fee range",
      "peek dataObject",
      "call getCalcStats/min/pair/$pair/fee",
      "trim '%'",
      "poke minfee",
      "peek dataObject",
      "call getCalcStats/max/pair/$pair/fee",
      "trim '%'",
      "poke maxfee",
      "# calculate price based on valuation * (1+feepercentage)",
      "rout /e/valuations/rate/$toSymbol/$fromBase/1 2 1",
      "data 0",
      "poke unitPrice",
      "with bid [math,$unitPrice*(1-($minfee/100))] [form,$fromBase]",
      "with askfee [peek,dataObject] [call,getCalcStats/min/pair/$toSymbol:$fromBase/fee] [trim,'%'] [ship,2] [done,0]",
      "with ask [true,'$askfee>0',2] [done,$bid] [math,'$unitPrice * (1 + ($askfee / 100))'] [form,$fromBase]",
      "# calculate 24 hour volume",
      "with volume call getVolume/$fromBase/$toSymbol",
      "# neatly present fee(s)",
      "with minfee form $fromBase",
      "with maxfee form $fromBase",
      "with feerange [true,'$minfee==$maxfee',2] [done,'R[$minfee%,$maxfee%]'] [done,'$minfee%']",
      "# all done",
      "with timestamp [date,now] [math,round]",
      "done {'$pair':{base:'$fromBase',ask:'$ask',bid:'$bid',volume:'$volume',fee:'$feerange',sufficiency:'$sufficiency',liquidity:'$liquidity',updated:'$timestamp'}}"
    ],
    "getCalcStats/action/var/pair/specifier" : [
      "with specifier [void,2] [done] [peek,pair] [splt,':'] [pick,-1]",
      "each getCalcStatsHelper {var:'$var',pair:'$pair',specifier:'$specifier'}",
      "type array",
      "flow action {add:@add,min:@min,max:@max,average:@average}",
      "@average",
      "with total [data,$] [size]",
      "math +",
      "math /$total",
      "done",
      "@min",
      "excl 0",
      "sort",
      "pick",
      "done",
      "@max",
      "sort",
      "pick -1",
      "done",
      "@add",
      "math +"
    ],
    "getCalcStatsHelper" : [
      "have .value.pairs.[${.meta.pair}] 1 @peekVar",
      "have .value.pairs.[${.meta.pair}].[${.meta.specifier}] 1 @peekVar",
      "# apply fee modifiers if needed",
      "flow .meta.specifier fee 1 3",
      "poke accountID ${.key}",
      "with feeSymbol [data,${.meta.pair}] [splt,':'] [pick]",
      "peek .value.pairs.[${.meta.pair}].[${.meta.specifier}]",
      "void feeSymbol @return 1",
      "with feeModifier call getFeeModifier/$accountID/$feeSymbol",
      "call modifyFee/$feeModifier",
      "@return",
      "done",
      "@peekVar",
      "peek .value.[${.meta.var}].[${.meta.specifier}] 0"
    ],
    "getVolume/fromBase/toSymbol" : [
      "# get last 24 hour volume",
      "call deal::readHistory/0/86400",
      "each getVolumeAmount/$fromBase/$toSymbol",
      "math +"
    ],
    "getVolumeAmount/fromBase/toSymbol" : [
      "flow .value.deal.bid.symbol '$toSymbol' 1 @zero",
      "flow .value.deal.ask.symbol '$fromBase' 1 @zero",
      "void .value.deal.ask.txid any @zero",
      "void .value.deal.bid.txid any @zero",
      "void .value.deal.pushtime any @zero",
      "tran .value.deal.ask.amount 1 @zero",
      "done",
      "@zero",
      "done 0"
    ],

    "validateAccount/accountID" : [
      "peek accountID",
      "regx '$accountIdRegex' 2 1",
      "fail 'Invalid account reference!'"
    ],

    "pair/command/accountID/A/B/C/D/E/F" : [
      "call ${command}Pair/$accountID/$A/$B/$C/$D/$E/$F"
    ],
    "historyPair/fromBase/toSymbol" : [
      "# get last 24 hour volume",
      "call deal::readHistory/0/2592000",
      "each getVolumeAmount/$fromBase/$toSymbol",
      "with tradesMonthly [data,$] [size]",
      "with tradesWeekly [math,'floor($tradesMonthly/7)']",
      "with tradesDaily [math,'floor($tradesMonthly/30)']",
      "with volumeMonthly [data,$] [math,+]",
      "with volumeWeekly [math,'$volumeMonthly/7'] [form,5]",
      "with volumeDaily [math,'$volumeMonthly/30'] [form,5]",
      "done {symbol:$fromBase,allPairTrades:{daily:$tradesDaily,weekly:$tradesWeekly,monthly:$tradesMonthly},volume:{daily:$volumeDaily,weekly:$volumeWeekly,monthly:$volumeMonthly}}"
    ],
    "statsPair/fromBase/toSymbol" : [
      "peek fromBase",
      "flow 'undefined' 1 @onePair",
      "peek local::pairstats {}",
      "done",
      "@onePair",
      "peek local::pairstats {}",
      "poke pair '$fromBase:$toSymbol'",
      "tran .[${fromBase}:${toSymbol}] 2 1",
      "fail 'Stats are currently not available for this pair!'",
      "done { '$pair' : $ }"
    ],
    "checkSignature/accountID/signature/message" : [
      "call validateAccount/$accountID",
      "call keysAccount/$accountID",
      "root 1 2",
      "done",
      "data '${message}-${.secretKey}'",
      "hash",
      "flow '$signature' 2 1",
      "fail 'Incorrect signature'"
    ],
    "deletePair/accountID/fromBase/toSymbol/signature" : [
      "call checkSignature/$accountID/$signature/deletePair-${accountID}-${fromBase}-${toSymbol}",
      "have local::accounts[$accountID].pairs[$fromBase:$toSymbol] 2 1",
      "fail 'Pair does not exist'",
      "peek local::accounts[$accountID].pairs",
      "drop $fromBase:$toSymbol",
      "poke local::accounts[$accountID].pairs",
      "done 'Deleted pair $fromBase:$toSymbol'"
    ],
    "setPair/accountID/fromBase/toSymbol/feePercent/type/signature" : [
      "call checkSignature/$accountID/$signature/setPair-${accountID}-${fromBase}-${toSymbol}-${feePercent}-${type}",
      "with [fromBase,toSymbol] case lower",
      "flow toSymbol {$fromBase:1} 2",
      "fail 'Cannot provide two identical symbols.'",
      "call getSecurityDepositBalance/$accountID",
      "true <$conf::securityMinimalDeposit 1 2",
      "fail 'A minimal security reserve of $conf::securityMinimalDeposit $conf::securitySymbol is required to setup this pair, currently only $ $conf::securitySymbol is available.'",
      "call getAccountBalance/$accountID/$toSymbol",
      "true >0 2 1 ",
      "fail 'A non zero balance of $toSymbol is required to setup this pair, currently only $ $toSymbol is available.'",
      "with type [flow,'undefined',1,2] [done,autonomous]",
      "data {ask:'$fromBase',bid:'$toSymbol',fee:'${feePercent}%',risk:'15%',type:'$type'}",
      "poke local::accounts[$accountID].pairs[$fromBase:$toSymbol]",
      "poke local::accounts[$accountID].feeModifiers[$toSymbol] 0"
    ],
    "getPair/accountID/fromBase/toSymbol/signature" : [
      "time 30000",
      "call checkSignature/$accountID/$signature/getPair-${accountID}-${fromBase}-${toSymbol}",
      "with [fromBase,toSymbol] case lower",
      "flow toSymbol {$fromBase:1} 2",
      "fail 'Cannot provide two identical symbols.'",
      "have local::accounts[$accountID].pairs[$fromBase:$toSymbol] 2 1",
      "fail 'Pair does not exist'",
      "peek local::accounts[$accountID].pairs[$fromBase:$toSymbol]",
      "call addPairDetails/$accountID/$fromBase/$toSymbol",
      "drop accountID"
    ],
    "getFeeModifier/accountID/symbol" : [
      "peek local::accounts[$accountID].feeModifiers[$symbol] 0",
      "ship 2 1 1 1",
      "done 1"
    ],
    "modifyFee/modifier" : [
      "trim '%'",
      "math '* $modifier'",
      "form $storageFactor",
      "push '%'"
    ],
    "doRebalancePair/accountID/symbol/amount" :[
      "call validateAccount/$accountID",
      "with symbol case lower",
      "rout /a/$symbol/details",
      "poke feeSymbol ${.fee-symbol}",
      "poke feeFactor ${.fee-factor}",
      "poke feeAmount ${.fee}",
      "with balance call rebalanceMutate/$accountID/$symbol/$amount",
      "call feeModifierMutate/$accountID/$symbol/-$amount/$balance",
      "form $feeFactor",
      "poke feeMutation",
      "# also rebalance with fee amounts if an amount has been subtracted",
      "ship amount @reportBalance @reportBalance 1 @reportBalance",
      "call rebalanceMutate/$accountID/$feeSymbol/-$feeAmount",
      "flow feeSymbol {$symbol:1} 2",
      "poke balance",
      "call feeModifierMutate/$accountID/$feeSymbol/$feeAmount/$balance",
      "@reportBalance",
      "with balance form $symbol",
      "done 'Pair available balance is now $balance $symbol. Fee mutation is $feeMutation $symbol.'"
    ],
    "rebalancePair/accountID/symbol/amount/signature" : [
      "call checkSignature/$accountID/$signature/rebalancePair-${accountID}-${symbol}-${amount}",
      "call doRebalancePair/$accountID/$symbol/$amount"
    ],
    "rebalanceMutate/accountID/symbol/amount" : [
      "call validateAccount/$accountID",
      "call getAccountBalance/$accountID/$symbol",
      "math '+$amount'",
      "poke local::accounts[$accountID].balances[$symbol]"
    ],
    "feeModifierMutate/accountID/symbol/amount/total" : [
      "call validateAccount/$accountID",
      "call getFeeModifier/$accountID/$symbol",
      "with amount [ship,3,3,2,1] [done,0] [math,'-1 / (2 - $amount)']",
      "math '+ ($amount / $total)'",
      "true <0.527 1 2",
      "done 0.527",
      "true >10 1 2",
      "done 10",
      "poke local::accounts[$accountID].feeModifiers[$symbol]"
    ],
    "selectPair/fromBase/toSymbol/amount" : [
      "call findPair/$fromBase/$toSymbol",
      "void 1 2",
      "fail 'This pair does not exist!'",
      "with amount [ship,2,2,1,1] [done,1]",
      "each selectEligibility/$amount",
      "excl null",
      "sort .fee",
      "pick",
      "void 1 2",
      "fail 'No allocators are offering the needed liquidity!'"
    ],
    "selectEligibility/amount" : [
      "# eligibility to be selected: enough balance, enough security sufficiency",
      "data ${.value}",
      "# take along transaction fee and then some 5% for the network fee",
      "with feeFloat [data,${.fee}] [trim,'%'] [math,'/100']",
      "with needed math '($amount * (1 + $conf::securityTransferFee + $feeFloat))'",
      "true '${.balance} >= $needed and ${.sufficiency} >= $needed' 1 2",
      "done",
      "done null"
    ],
    "listPair/accountID" : [
      "call pairListCompiler/$accountID"
    ],
    "findPair/fromBase/toSymbol" : [
      "with [fromBase,toSymbol] case lower",
      "flow toSymbol {$fromBase:1} 2",
      "fail 'Cannot provide two identical symbols.'",
      "peek local::accounts",
      "void 1 2",
      "done []",
      "each findPairEach/$fromBase/$toSymbol",
      "type array",
      "excl null"
    ],
    "findPairEach/fromBase/toSymbol" : [
      "poke accountID ${.key}",
      "have local::accounts[$accountID].pairs[$fromBase:$toSymbol] 2 1",
      "done null",
      "peek local::accounts[$accountID].pairs[$fromBase:$toSymbol]",
      "call addPairDetails/$accountID/$fromBase/$toSymbol"
    ],
    "addPairDetails/accountID/fromBase/toSymbol" : [
      "# decouple from locally stored vars",
      "data {accountID:null,ask:${.ask},bid:${.bid},fee:${.fee},risk:${.risk},type:${.type},balance:${.balance},sufficiency:${.sufficiency},active:false}",
      "with .accountID peek accountID",
      "# balance returned for deals is halved to promote pair balancing!",
      "with balanceSymbol [peek,supplyOverrideSymbols.$toSymbol,null] [void,1,2] [done,$toSymbol]",
      "with .balance [call,getAccountBalance/$accountID/$balanceSymbol] [math,'* (${conf::liquidityPercentage} / 100)']",
      "with .sufficiency call getSufficiency/$accountID/$toSymbol",
      "with .sufficiency [math,'min(${.sufficiency},${.balance})'] [ship,2,1,1,1] [done,0]",
      "with .active math '${.balance}>0.001 and ${.sufficiency}>0.001'",
      "with feeModifier call getFeeModifier/$accountID/$toSymbol",
      "with .fee call modifyFee/$feeModifier"
    ],

    "account/command/accountID/A/B/C/D/E/F" : [
      "flow command {list: 2} 1",
      "call validateAccount/$accountID",
      "flow command {securityReserve: 1} @other",
      "flow A {extract:@extract,reserve:@reserve,details:@details,balance:@balance}",
      "@balance",
      "call securityReserveAccountBalance/$accountID/$B",
      "done",
      "@details",
      "call securityReserveAccountDetails/$accountID/$B",
      "done",
      "@extract",
      "call securityReserveAccountWithdraw/$accountID/$B/$C",
      "done",
      "@reserve",
      "call securityReserveAccountDeposit/$accountID/$B/$C",
      "done",
      "@other",
      "call ${command}Account/$accountID/$A/$B/$C/$D/$E/$F"
    ],
    "initAccount/accountID/entropy" : [
      "with accountHash [data,'account $entropy'] [hash] [code,hex,base58]",
      "flow accountID '$accountHash' 2 1",
      "fail 'Non-matching account ID and entropy!'",
      "have local::accounts[$accountID] 1 2",
      "done $accountID",
      "with entropy [code,hex,base58] [encr]",
      "with created [date,now] [math,round]",
      "data {created:$created,entropy:$entropy, pairs:{}, feeModifiers:{}, balances:{}, securityDepositBalances:{}}",
      "poke local::accounts[$accountID]",
      "call getAccountBalance/$accountID/${conf::securitySymbol}",
      "poke local::accounts[$accountID].balances[${conf::securitySymbol}]",
      "peek local::accounts[$accountID]"
    ],
    "listAccount" : [
      "peek local::accounts {}",
      "flat",
      "pick"
    ],
    "removeAccount/accountID/signature" : [
      "call checkSignature/$accountID/$signature/removeAccount-${accountID}",
      "peek local::accounts {}",
      "drop $accountID",
      "poke local::accounts"
    ],
    "loadAccount/accountID" : [
      "have local::accounts[$accountID] 2 1",
      "fail 'Account does not exist!'",
      "peek local::accounts[$accountID]",
      "with entropy [data,${.entropy}] [decr,2,1] [done,''] [code,base58,hex]",
      "with keys keys $entropy",
      "done {created:'${.created}',keys:$keys, pairs:${.pairs}, balances:${.balances}, feeModifiers: ${.feeModifiers}, securityDepositBalances:${.securityDepositBalances}}"
    ],
    "keysAccount/accountID" : [
      "call loadAccount/$accountID",
      "tran .keys 2 1",
      "done null"
    ],
    "detailsAccount/accountID/signature" : [
      "call checkSignature/$accountID/$signature/detailsAccount-${accountID}",
      "call loadAccount/$accountID",
      "tran {id:'$accountID', created:.created, pairs:.pairs, balances:.balances, feeModifiers: .feeModifiers, securityDepositBalances:.securityDepositBalances} 2 1",
      "fail 'Could not get account details!'"
    ],
    "existsAccount/accountID" : [
      "have local::accounts[$accountID] 1 2",
      "done true",
      "done false"
    ],
    "getAddressAccount/accountID/symbol"  : [
      "with symbol case lower",
      "with keyHash [data,'allocationAddressCache $accountID $symbol'] [hash]",
      "with timeNow date now",
      "meta $keyHash",
      "test .time 1 @deriveAddress",
      "true '(${.time} + $conf::allocationAddressCacheTime) > $timeNow' @deriveAddress 1",
      "load $keyHash 1 @deriveAddress",
      "decr 1 @deriveAddress",
      "done",
      "@deriveAddress",
      "logs 'deriving $symbol address for $accountID'",
      "with auth [flow,accountID,node,1,2] [done,{auth:node}] [call,keysAccount/$accountID]",
      "data {symbol:$symbol}",
      "bank getAddress $auth 2 1",
      "fail 'Could not derive account address!'",
      "poke result",
      "encr",
      "save $keyHash",
      "done $result"
    ],
    "addressAccount/accountID/symbol/signature" : [
      "call checkSignature/$accountID/$signature/adressAccount-${accountID}-${symbol}",
      "call getAddressAccount/$accountID/$symbol"
    ],
    "balanceAccount/accountID/symbol/signature" : [
      "call checkSignature/$accountID/$signature/balanceAccount-${accountID}-${symbol}",
      "call getAccountBalance/$accountID/$symbol"
    ],
    "getAccountBalance/accountID/symbol":[
      "with now [date,now] [math,round]",
      "peek local::accounts[$accountID].lastsync[$symbol] 0",
      "true '$ < ($now - $conf::allocationBalanceCacheTime)' @retrieve @peek",
      "@peek",
      "peek local::accounts[$accountID].balances[$symbol] 0",
      "ship 1 1 2 2",
      "done",
      "@retrieve",
      "hook @peek",
      "with auth call keysAccount/$accountID",
      "call getAddressAccount/$accountID/$symbol",
      "rout /a/$symbol/balance/$",
      "poke local::accounts[$accountID].balances[$symbol]",
      "poke local::accounts[$accountID].lastsync[$symbol] $now"
    ],
    "securityReserveAccountBalance/accountID/signature":[
      "call checkSignature/$accountID/$signature/securityReserveAccount-${accountID}-balance",
      "with locked call getSecurityLockedBalance/$accountID",
      "call getSecurityDepositBalance/$accountID",
      "math '-$locked'"
    ],
    "securityReserveAccountDetails/accountID/signature":[
      "call checkSignature/$accountID/$signature/securityReserveAccount-${accountID}-details",
      "with locked call getSecurityLockedBalance/$accountID",
      "call getSecurityDepositBalance/$accountID",
      "math '$ - $locked'",
      "done { symbol:${conf::securitySymbol}, balance:'$', locked:'$locked', fees: { contract:'${conf::securityContractFee}%', transfer:'${conf::securityTransferFee}%' }}"
    ],
    "securityReserveAccountDeposit/accountID/amount/signature":[
      "time 60000",
      "call checkSignature/$accountID/$signature/securityReserveAccount-${accountID}-reserve-${amount}",
      "with balance call getSecurityDepositBalance/$accountID",
      "with locked call getSecurityLockedBalance/$accountID",
      "ship amount 2 1 1 1",
      "fail 'You must specify a positive amount to deposit!'",
      "with target call getAddressAccount/node/${conf::securitySymbol}",
      "with auth call keysAccount/$accountID",
      "call getAccountBalance/$accountID/${conf::securitySymbol}",
      "true '< $amount' 1 3",
      "with symbol [data,${conf::securitySymbol}] [case,upper]",
      "fail 'You do not have that amount in your allocation account! Please deposit ${conf::securityMinimalDeposit} $symbol first, and then try again.'",
      "data {symbol:${conf::securitySymbol},amount:$amount,target:$target}",
      "bank transaction $auth 2 1",
      "fail 'Security reserve transaction error: $'",
      "poke txid",
      "with regAmount math '$amount * (1 - (${conf::securityTransferFee} / 100))'",
      "with paidFee math '$amount - $regAmount'",
      "call setSecurityDepositBalance/$accountID/$regAmount",
      "fork doRebalancePair/$accountID/${conf::securitySymbol}/-$amount",
      "with newBalance math '$balance - $locked + $amount'",
      "done { action: 'deposit', symbol: ${conf::securitySymbol},balance: $newBalance, locked: $locked, deposited: $regAmount, fee: $paidFee, txid: $txid }",
      "# todo: keep track of txids to later check if balances are correct!"
    ],
    "securityReserveAccountWithdraw/accountID/amount/signature":[
      "time 60000",
      "call checkSignature/$accountID/$signature/securityReserveAccount-${accountID}-extract-${amount}",
      "ship amount 2 1 1 1",
      "fail 'You must specify a positive amount to withdraw!'",
      "# is amount available to withdraw?",
      "with balance call getSecurityDepositBalance/$accountID",
      "with locked call getSecurityLockedBalance/$accountID",
      "true '($balance - $locked) >= $amount' 2 1",
      "fail 'Security lock error: Cannot unlock amount higher than locked balance!'",
      "with target call getAddressAccount/$accountID/${conf::securitySymbol}",
      "data {symbol:${conf::securitySymbol},amount:$amount,target:$target}",
      "bank transaction {auth:node} 2 1",
      "fail 'Security withdrawal error: $'",
      "poke txid",
      "call setSecurityDepositBalance/$accountID/-$amount",
      "fork doRebalancePair/$accountID/${conf::securitySymbol}/+$amount",
      "with newBalance math '$balance - $locked - $amount'",
      "done { action: 'withdraw', symbol: ${conf::securitySymbol}, balance: $newBalance, locked: $locked, withdrawn: $amount, txid: $txid }",
      "# todo nice-to-have: keep track of txids to later check if balances are correct!"
    ],
    "securityReserveAccountLock/accountID/request/amount":[
      "with balance call getSecurityDepositBalance/$accountID",
      "with locked call getSecurityLockedBalance/$accountID",
      "with amount [ship,3,1,1,2] [warn,'Attempt to lock zero or negative amount on security reserve!'] [done,0] [math,'* $conf::securityRiskFactor']",
      "flow request {'unlock':@unlock,'unlockWithFee':@unlockWithFee,'cron':@cronUnlock}",
      "@lock",
      "true '($balance - $locked) >= $amount' 2 1",
      "fail 'Security lock error: Cannot lock amount higher than available balance!'",
      "math '$locked + $amount'",
      "call securityForceLockedBalanceAccount/$accountID/$",
      "done",
      "@cronUnlock",
      "math '$locked * ( 1 - ($conf::securityReleaseCron/100))'",
      "call securityForceLockedBalanceAccount/$accountID/$",
      "done",
      "@unlockWithFee",
      "# unlock amount, subtracting sequestration fee",
      "with sequestrationFee [math,'$balance * ${conf::securityContractFee}']",
      "call setSecurityDepositBalance/$accountID/-$sequestrationFee",
      "@unlock",
      "true '$locked >= $amount' 2 1",
      "fail 'Security lock error: Cannot unlock amount higher than locked balance!'",
      "math '$locked - $amount'",
      "call securityForceLockedBalanceAccount/$accountID/$"
    ],

    "setSecurityDepositBalance/accountID/amount" : [
      "call getSecurityDepositBalance/$accountID",
      "math '+$amount'",
      "call securityForceDepositBalanceAccount/$accountID/$"
    ],
    "getSecurityDepositBalance/accountID" : [
      "have local::accounts[$accountID] 2 1",
      "fail 'Account does not exist!'",
      "peek local::accounts[$accountID].securityDepositBalances[$conf::securitySymbol] 0"
    ],
    "securityForceDepositBalanceAccount/accountID/amount" : [
      "have local::accounts[$accountID] 2 1",
      "fail 'Account does not exist!'",
      "peek amount",
      "form ${conf::securitySymbol}",
      "poke local::accounts[$accountID].securityDepositBalances[$conf::securitySymbol]"
    ],
    "setSecurityLockedBalance/accountID/amount" : [
      "call getSecurityLockedBalance/$accountID",
      "math '+$amount'",
      "call securityForceLockedBalanceAccount/$accountID/$"
    ],
    "getSecurityLockedBalance/accountID" : [
      "have local::accounts[$accountID] 2 1",
      "fail 'Account does not exist!'",
      "peek local::accounts[$accountID].securityLockedBalances[$conf::securitySymbol] 0"
    ],
    "securityForceLockedBalanceAccount/accountID/amount" : [
      "have local::accounts[$accountID] 2 1",
      "fail 'Account does not exist!'",
      "peek amount",
      "true '$amount >= 0' 2 1",
      "done 'Cannot subtract $amount from locked balance!'",
      "form ${conf::securitySymbol}",
      "poke local::accounts[$accountID].securityLockedBalances[$conf::securitySymbol]"
    ],
    "getSufficiency/accountID/symbol" : [
      "with depositBalance call getSecurityDepositBalance/$accountID",
      "call getSecurityLockedBalance/$accountID",
      "math '$depositBalance - $'",
      "rout /e/valuations/rate/${conf::securitySymbol}/$symbol/$",
      "ship 2 1 1 1",
      "done 0",
      "form ${conf::securitySymbol}"
    ],


    "push" : [
      "void 1 2",
      "fail 'Missing transaction.'",
      "decr 1 -1",
      "jpar",
      "poke [accountID,symbol,amount,target]",
      "with auth call keysAccount/$accountID",
      "data {symbol:$symbol,amount:$amount,target:$target}",
      "bank transaction $auth 1 2",
      "done",
      "logs 'ERROR: push failure - $'",
      "fail"
    ],

    "security-symbol" : [
      "peek conf::securitySymbol"
    ]
  },

  "router" : {
    "_help" : "Account engine for sequestration actions between node and clients.",
    "pair" : {
      "_help" : "Manage swap pairs.",
      "list" : "List all available swap pairs on offer.",
      "find" : {
        "_help" : "Find allocated swap pairs on offer.",
        "_ref" : {
          "_list" : "fromBase",
          "_help" : "Base source symbol for the pair.",
          "_ref" : {
            "_list" : "toSymbol",
            "_this" : "Swap target symbol for the pair."
          }
        }
      },
      "rebalance" : {
        "_help" : "Rebalance a swap pair, and mutate associated fees.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to check for its existance.",
          "_ref" : {
            "_list" : "symbol",
            "_this" : "Target symbol to rebalance.",
            "_ref" : {
              "_list" : "amount",
              "_this" : "Amount to rebalance available funds with. For example for reserving a balance. Without this option the amount is checked on the blockchain.",
              "_ref" : {
                "_list" : "signature",
                "_this" : "Signature for the operation."
              }
            }
          }
        }
      },
      "select" : {
        "_help" : "Select an allocated swap pair according to available amount and cheapest fee.",
        "_ref" : {
          "_list" : "fromBase",
          "_help" : "Base source symbol for the pair.",
          "_ref" : {
            "_list" : "toSymbol",
            "_this" : "Swap target symbol for the pair.",
            "_ref" : {
              "_list" : "amount",
              "_this" : "Amount of target asset you wish to receive."
            }
          }
        }
      },
      "stats" : {
        "_help" : "Show pairs allocation status information.",
        "_this" : "Specifying no symbols will return all pairs.",
        "_ref" : {
          "_list" : "fromBase",
          "_this" : "Base source symbol for the pair.",
          "_ref" : {
            "_list" : "toSymbol",
            "_this" : "Swap target symbol for the pair."
          }
        }
      },
      "history" : {
        "_help" : "Show pairs history over the last 24 hours.",
        "_this" : "Specifying pairs for this is mandatory.",
        "_ref" : {
          "_list" : "fromBase",
          "_this" : "Base source symbol for the pair.",
          "_ref" : {
            "_list" : "toSymbol",
            "_this" : "Swap target symbol for the pair."
          }
        }
      },
      "get" : {
        "_help" : "Get information about an allocation swap pair.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to check for its existance.",
          "_ref" : {
            "_list" : "fromBase",
            "_help" : "Base source symbol for the pair.",
            "_ref" : {
              "_list" : "toSymbol",
              "_this" : "Swap target symbol for the pair.",
              "_ref" : {
                "_list" : "signature",
                "_this" : "Signature for the operation."
              }
            }
          }
        }
      },
      "set" : {
        "_help" : "Set information for an allocation swap pair, or create a new pair.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to check for its existance.",
          "_ref" : {
            "_list" : "fromBase",
            "_help" : "Base source symbol for the pair.",
            "_ref" : {
              "_list" : "toSymbol",
              "_help" : "Swap target symbol for the pair.",
              "_ref" : {
                "_list" : "feePercent",
                "_this" : "Fee to ask for a swap on this pair.",
                "_ref" : {
                  "_list" : "type",
                  "_this" : "Type of swap mechanism.",
                  "_ref" : {
                    "_list" : "deadline",
                    "_this" : "Deadline in seconds for swap completion.",
                    "_ref" : {
                      "_list" : "signature",
                      "_this" : "Signature for the operation."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "_help" : "Delete an allocation swap pair.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to check for its existance.",
          "_ref" : {
            "_list" : "fromBase",
            "_help" : "Base source symbol for the pair.",
            "_ref" : {
              "_list" : "toSymbol",
              "_this" : "Swap target symbol for the pair.",
              "_ref" : {
                "_list" : "signature",
                "_this" : "Signature for the operation."
              }
            }
          }
        }
      }
    },
    "account" : {
      "_help" : "Manage derived keypair sequestrated accounts.",
      "list" : {
        "_this": "List all accountIDs.",
        "_access":"root"
      },
      "init" : {
        "_help" : "Initialize a new account.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "You must specify an account ID that matches the secret key input.",
          "_ref" : {
            "_list" : "secret_key",
            "_this" : "Secret key to use for the newly initialized account."
          }
        }
      },
      "exists" : {
        "_help" : "Check if an account exists.",
        "_ref" : {
          "_list" : "accountID",
          "_this" : "Provide the account ID to check for its existance."
        }
      },
      "details" : {
        "_help" : "Get the details of an account.",
        "_ref" : {
          "_list" : "accountID",
          "_this" : "Provide the account ID to get the details.",
          "_ref" : {
            "_list" : "signature",
            "_this" : "Signature for the operation."
          }
        }
      },
      "address" : {
        "_help" : "Get the address of an account belonging to a symbol.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to get the details.",
          "_ref" : {
            "_list" : "symbol",
            "_this" : "Symbol to get the address of.",
            "_ref" : {
              "_list" : "signature",
              "_this" : "Signature for the operation."
            }

          }
        }
      },
      "balance" : {
        "_help" : "Get the address balance of an account belonging to a symbol.",
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to get the details.",
          "_ref" : {
            "_list" : "symbol",
            "_this" : "Symbol to get the balance of.",
            "_ref" : {
              "_list" : "signature",
              "_this" : "Signature for the operation."
            }
          }
        }
      },
      "securityReserve" : {
        "_ref" : {
          "_list" : "accountID",
          "_help" : "Provide the account ID to check for its existance.",
          "_ref" : {
            "_list" : "action",
            "_this" : "The action to take: balance, details, deposit or withdraw.",
            "_ref" : {
              "_list" : "amount",
              "_this" : "Amount to sequestrate between the allocation account and the security reserve.",
              "_ref" : {
                "_list" : "signature",
                "_this" : "Signature for the operation."
              }
            }
          }
        }
      }
    },
    "security-symbol" : "Get the used security symbol"
  }
}
