{
  "engine":"bitcore",
  "name":"Bitcore HTTP(S) engine",
  "cache":15000,
  "import": "transaction-history",
  "apiProvidesFullTx": false,
  "throttle":1,
  "timeout":24000,
  "longTimeout":60000,
  "shortTimeout":15000,
  "factor":8,
  "fee":0,
  "documentation" : "https://github.com/bitpay/bitcore/blob/master/packages/bitcore-node/docs/api-documentation.md",
  "feePerByte":0,
  "confirmsRequired":6,
  "utxo_unspent_prefix":"76a914",
  "utxo_unspent_suffix":"88ac",
  "trimAddrHexL":"2",
  "trimAddrHexR":"8",
  "cron":600,
  "quartz":{
    "sanitizeAddres":[
      "poke address",
      "regx '^$prefix' 1 @nothingToDo",
      "peek prefix",
      "size",
      "poke prefixLength",
      "peek address",
      "take $prefixLength",
      "@nothingToDo"
    ],
    "balance/address" : [
      "with address call sanitizeAddres",
      "time $timeout",
      "curl /address/$address/balance 2 1",
      "fail 'Connection to host failed'",
      "tran .balance 2 1",
      "fail 'Result from host invalid'",
      "atom"
    ],
    "unspent/source/amount/target=/publicKey/message" : [
      "with source call sanitizeAddres",
      "data $amount",
      "ship @amountSpecified @amountSpecified 1 1",
      "call unspentAll/$source",
      "done",
      "@amountSpecified",
      "with target call sanitizeAddres",
      "poke inputval '$amount' '1000000000000'",
      "with inputval atom 1",
      "time $timeout",
      "curl /address/$source?unspent=true 2 1 ",
      "fail 'Could not connect to host'",
      "tran []{script:.script,amount:=.value|.satoshis,txid:.mintTxid,txn:.mintIndex} 2 1",
      "fail 'Parsing failed for unspents'",
      "sort '.amount'",
      "scan 'cnt<($inputval+val.amount)' '+val.amount'",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "math '-$inputval'",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],
    "unspentAll/source" : [
      "data '1000000000000'",
      "poke inputval",
      "time $timeout",
      "curl /address/$source?unspent=true 2 1",
      "fail 'Could not connect to host'",
      "tran []{script:.script,amount:=.value|.satoshis,txid:.mintTxid,txn:.mintIndex} 2 1",
      "fail 'Could not parse unspents'",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],
    "push/transaction" : [
      "time $timeout",
      "data {rawTx:'$transaction'}",
      "curl /tx/send POST {'Content-Type':'application/json'} @curlSuccess @curlFail",
      "@curlFail",
      "fail 'Could not connect to host: $.'",
      "@curlSuccess",
      "tran .txid 2 1",
      "fail 'Bad transaction result. $'",
      "done"
    ],
    "transactionData/txId" : [
      "time $timeout",
      "curl /tx/$txId/coins GET 1 @fail",
      "tran {source: .inputs[].address,target: .outputs[].address, spends: .outputs[][.address, =atom(.value)]}",
      "with .source [uniq] [join,',']",
      "with .target [uniq] [join,',']",
      "with .spends type object",
      "poke sourceAndTarget",
      "curl /tx/$txId GET 1 @fail",
      "with .source peek sourceAndTarget.source",
      "with .target peek sourceAndTarget.target",
      "with .spends peek sourceAndTarget.spends ",
      "done",
      "@fail",
      "fail 'Could not connect to host'"
    ],
    "reformatTx" : [
      "tran .value 2 1",
      "fail 'Could not parse transaction'",
      "with sources [data,${.source}] [splt,',']",
      "with target [data,${.target}] [splt,','] [excl,$sources,true] [join,',']",
      "with txAmount [data,${.spends}] [each,transactionValueFilter/$sources] [flat] [pick,-1] [math,'+']",
      "tran { id:.txid, timestamp:.blockTimeNormalized, amount: '$txAmount', symbol:'$symbol', fee:.fee, 'fee-symbol':'$symbol', source:.source, target:$target, confirmed:.confirmations, spends: .spends} 2 1 ",
      "fail 'Failed to transform transaction data'",
      "with .fee atom false $factor",
      "with .amount form $factor",
      "with .timestamp date"
    ],
    "transactionValueFilter/sources" : [
      "poke key ${.key}",
      "poke value ${.value}",
      "peek sources",
      "excl $key false @zero 1",
      "done $value",
      "@zero",
      "done '0'"
    ],
    "getTransaction/txId" : [
      "time $timeout",
      "call transactionData/$txId",
      "tran {value: $}",
      "call reformatTx",
      "done"
    ],
    "attachment/txId" : [
      "time $timeout",
      "call transactionData/$txId",
      "tran .vout 1 @empty",
      "jstr",
      "splt 'OP_RETURN '",
      "pick 1",
      "splt '\"'",
      "tran '[0]' 2 @empty",
      "@empty",
      "data null",
      "done"
    ],
    "message/txId" : [
      "time $timeout",
      "call attachment/$txId",
      "data '$'",
      "flow 'null' 1 2",
      "done ''",
      "code hex utf8",
      "done"
    ],
    "getHistory/address/count=12/offset=0" : [
      "with address call sanitizeAddres",
      "time $longTimeout",
      "with countTo [math,'$count+$offset']",
      "curl /address/$address/txs?limit=$countTo 2 1",
      "fail 'Could not connect to host'",
      "drop $offset",
      "tran [].mintTxid",
      "done"
    ],

    "fee/message" : [
      "poke opreturnFee 0",
      "data $message",
      "void @finalize 1",
      "data '$message'",
      "ship 2 2 2 1",
      "size",
      "math '$*$feePerByte'",
      "poke opreturnFee",
      "@finalize",
      "peek local::fee $fee",
      "math '$+$opreturnFee'",
      "flow 'null' 1 2",
      "data '$fee'",
      "@feeDone"
    ],
    "sample" : [
      "done {address:'1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX',transaction:'2c0832c153cf33327dae0e95a3bc39f4b02ae887725a32c07b1be47a2faffc55'}"
    ],
    "cron" : [
      "data '$symbol'",
      "flow 'undefined' 2 1",
      "call 'getFee'",
      "done"
    ],
    "getFee" : [
      "time $timeout",
      "curl /fee/99 2 1",
      "fail 'Could not connect to host'",
      "tran '.feerate' 2 1",
      "done",
      "poke local::fee",
      "math '/100'",
      "poke local::feePerByte",
      "done"
    ]
  }
}
