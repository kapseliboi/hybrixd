{
  "engine":"asset",
  "notes" : {},
  "default-features":{
    "message":false,
    "test":false
  },
  "quartz" : {
    "balance/address" : [
      "fail 'Not yet implemented!'"
    ],
    "fee-balance/address":[
      "call fee-symbol",
      "poke feeSymbol",
      "rout /a/$feeSymbol/balance/$address",
      "done {'$feeSymbol':$}"
    ],
    "subbalances/address" : [
      "call balance/$address",
      "done [{symbol:'$symbol', address:'$address', balance:'$'}]"
    ],
    "push/transaction" : [
      "fail 'Not yet implemented!'"
    ],
    "height" : [
      "fail 'Not yet implemented!'"
    ],
    "history" : [
      "fail 'Not yet implemented!'"
    ],
    "transaction/transactionId" : [
      "fail 'Not yet implemented!'"
    ],
    "init" : [
      "done"
    ],
    "unspent" : [
      "done {}"
    ],
    "mode" : [
      "peek mode default"
    ],
    "block/blockNumber" : [
      "fail 'Not yet implemented!'"
    ],
    "confirm/transactionId" : [
      "call confirmed/$transactionId",
      "flow 'true' 5 1",
      "ship 2 1 1 1",
      "data 0",
      "math '$ / $confirmed'",
      "true '>1' 1 2",
      "data 1"
    ],
    "confirmed/transactionId" : [
      "test transactionId 2 1",
      "done $confirmed",
      "call getConfirmed/$transactionId"
    ],
    "getConfirmed/transactionId" : [
      "call transaction/$transactionId",
      "tran .confirmed 1 2",
      "done",
      "fail 'Could not get confirmations!'"
    ],
    "contract" : [
      "data '$contract'",
      "flow 'undefined' 1 2",
      "data null",
      "done"
    ],
    "info" : [
      "peek info ''"
    ],
    "notes" : [
      "peek notes {}"
    ],
    "factor" : [
      "peek factor"
    ],
    "fee/bytes" : [
      "peek fee",
      "#TODO in case of default multi fees call fee-symbol",
      "#data {'$':'$fee'}"
    ],
    "icon" : [
      "peek symbol",
      "splt .",
      "pick -1",
      "data '../files/icons/$.svg'",
      "mime 'file:image/svg+xml'",
      "file 1 2",
      "done",
      "mime blob",
      "peek symbol",
      "splt .",
      "pick -1",
      "pick 0",
      "case upper",
      "done '<svg width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g id=\"Asset-view\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"> <g id=\"Symbols\" transform=\"translate(-367.000000, -248.000000)\" fill-rule=\"nonzero\" fill=\"#000000\"> <g id=\"error\" transform=\"translate(367.000000, 248.000000)\"> <path d=\"M25.016,0.016 C38.8656595,0.016 50.016,11.1663405 50.016,25.016 C50.016,38.8656595 38.8656595,50.016 25.016,50.016 C11.1663405,50.016 0.016,38.8656595 0.016,25.016 C0.016,11.1663405 11.1663405,0.016 25.016,0.016 Z\" id=\"Shape\"></path><text x=\"50%\" y=\"72%\" text-anchor=\"middle\" fill=\"white\" style=\"font-size: 30px; font-weight: 200;\">$</text></g> </g> </g> </svg>'",
      "done"
    ],
    "status" : [
      "call history/$1/3/0",
      "join",
      "hash sha256",
      "take 24 16",
      "done"
    ],
    "fee-factor" : [
      "call 'fee-symbol'",
      "rout '/a/$/factor'",
      "done"
    ],
    "fee-symbol" : [
      "data '$fee-symbol'",
      "flow {undefined:1} @differentFeeSymbol",
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done",
      "@differentFeeSymbol",
      "done"
    ],
    "formFee" : [
      "poke feeObject",
      "type",
      "flow {string:1, number: 1} @formMultiFee",
      "peek feeObject",
      "form '$fee-factor'",
      "done",
      "@formMultiFee",
      "peek feeObject",
      "each subFormFee",
      "done"
    ],
    "subFormFee": [
      "poke {subSymbol:key,amount:value}",
      "rout '/a/$subSymbol/factor'",
      "poke subFactor",
      "peek amount",
      "form '$subFactor'"
    ],
    "message/transactionId" : [
      "call attachment/$transactionId",
      "data '$'",
      "flow 'null' 1 2",
      "done ''",
      "code hex utf8",
      "done"
    ],
    "keygen-base" : [
      "data '$keygen-base'",
      "flow 'undefined' 1 2",
      "peek symbol",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "unified-symbols" : [
      "data '$unified-symbols'",
      "flow 'undefined' 1 2",
      "data null",
      "done"
    ],
    "report" : [
      "rout '/r/asset/$symbol/json'"
    ],
    "test-cli" : [
      "rout '/r/asset/$symbol/cli'"
    ],
    "test" : [
      "done {}"
    ],
    "test-hosts" : [
      "time 45000",
      "data '$host'",
      "flow 'undefined' 1 2",
      "done []",
      "peek host",
      "type",
      "flow {string:@fromString, array: @fromArray, object: @fromObject} 1",
      "fail 'Could not interpret hosts'",
      "@fromString",
      "data [$host]",
      "jump @getHostsAsArray",
      "@fromArray",
      "peek host",
      "jump @getHostsAsArray",
      "@fromObject",
      "peek host",
      "flat",
      "pick 1",
      "flat",
      "@getHostsAsArray",
      "type object",
      "each pingHost"
    ],
    "pingHost" : [
      "curl ${.key} {} {ping:true} 1 2",
      "done",
      "fail"
    ],
    "validate/address" : [
      "data '$addressRegex'",
      "flow 'undefined' 1 4",
      "rout '/source/wavalidator/validate/$symbol/$address' 2 1",
      "fail",
      "done",
      "data '$address'",
      "regx '$addressRegex' 1 2",
      "done 'valid'",
      "done 'invalid'"
    ],

    "subFeature":[
      "poke {key:key,meta:meta}",
      "tran .meta[${.key}] 1 2",
      "done",
      "done ${.value}"
    ],


    "features" : [
      "peek features {}",
      "poke custom-features",
      "test 1 @one @all",
      "@one",
      "have default-features[$1] 2 1",
      "fail 'Unknown feature: $1'",
      "tran '.$1' 1 2",
      "done",
      "peek default-features[$1]",
      "done",
      "@all",
      "peek default-features",
      "each subFeature $custom-features"
    ],
    "details" : [
      "data {'contract':null,'factor':null,features:null,fee:null,'fee-factor':null,'fee-symbol':null,'mode':null,'keygen-base':null,'unified-symbols':null, confirmed:null}",
      "each subdetails",
      "done {symbol:'$symbol',name:'$name',fee:${.fee},factor:'${.factor}',features:${.features},contract:'${.contract}',mode:'${.mode}','unified-symbols':${.unified-symbols},'fee-symbol':'${.fee-symbol}','fee-factor':'${.fee-factor}','keygen-base':'${.keygen-base}', confirmed: ${.confirmed}, notes:$notes}",
      "#TODO remove fee, fee-symbol, fee-factor after multi fees have been fully implemented",
      "#data {'contract':null,'factor':null,'mode':null,'keygen-base':null,'unified-symbols':null}",
      "#each subdetails",
      "#done {symbol:'$symbol',name:'$name',factor:'${.factor}',features:'${.features}',contract:'${.contract}',mode:'${.mode}','unified-symbols':${.unified-symbols},'keygen-base':'${.keygen-base}'}"
    ],
    "subdetails" : [
      "call '${.key}'"
    ],
    "transaction-details/source/amount/target/bytes/publicKey" : [
      "flow target {undefined:@noTarget,'':@noTarget} @validateTarget ",
      "@validateTarget",
      "call validate/$target",
      "jump @saveTargetValid",
      "@noTarget",
      "data 'n/a'",
      "@saveTargetValid",
      "poke targetValid",

      "call validate/$source",
      "poke sourceValid",
      "flow invalid 1 2",
      "done {source:invalid,target:$targetValid,unspent:'n/a',balances:'n/a',max-amount:0, fee:'n/a'}",
      "call balance/$source",
      "poke balance",

      "call fee-balance/$source",
      "poke balances",
      "call fee-symbol",
      "poke feeSymbol",

      "call fee/$bytes",
      "type {object:2} 1",
      "data {$feeSymbol:$}",
      "poke feeObject",
      "pick $symbol",
      "flow 'undefined' @noFeeInOwnSymbol 1",
      "math ${balance}-$",
      "jump @storeMaxAmount",
      "@noFeeInOwnSymbol",
      "peek balance",
      "poke balances[$symbol] $",
      "@storeMaxAmount",
      "form",
      "poke max-amount",

      "#determine if balance - fee < 0 for any fee symbol",
      "data [$balances,$feeObject]",
      "merg -",
      "flat",
      "pick 1",
      "math min",
      "true <0 1 @hasSufficientFees",
      "data 0",
      "form",
      "poke max-amount",
      "@hasSufficientFees",
      "call unspent/$source/$amount/$target/$publickKey",
      "poke unspent",
      "flow targetValid invalid 1 2",
      "done {source:$sourceValid,target:$targetValid,unspent:$unspent, balances:$balances, max-amount:0, fee: 'n/a'}",
      "done {source:$sourceValid,target:$targetValid,unspent:$unspent, balances:$balances, max-amount:$max-amount, fee: $feeObject}"
    ]
  },
  "router":{
    "_help":"Assets are cryptocurrencies or tokens.",
    "_this" : "List all available assets.",
    "_ref":{
      "_list":"asset",
      "_sample" : "dummy",
      "balance":{
        "_help":"Get the balance of an asset.",
        "_ref" : {
          "_list" : "address",
          "_sample" : "_dummyaddress_",
          "_this": "Query an address to get its balance.",
          "_response": {"error":0,"info":"Process data.","id":"1519829438958324","progress":1,"started":1519829438958,"stopped":1519829440606,"data":"0.025106200000000000"}
        }
      },
      "fee-balance":{
        "_help":"Get the fee balance of an asset.",
        "_ref" : {
          "_list" : "address",
          "_sample" : "_dummyaddress_",
          "_this": "Query an address to get its fee balance.",
          "_response": {"error":0,"info":"Process data.","id":"1519829438958324","progress":1,"started":1519829438958,"stopped":1519829440606,"data":"0.025106200000000000"}
        }
      },
      "subbalances":{
        "_help":"Get detailed balances of an asset.",
        "_ref" : {
          "_list" : "address",
          "_sample" : "_dummyaddress_",
          "_this": "Query an address to get its sub balance details."
        }
      },
      "transaction-details":{
        "_help":"Get details required to prepare a transaction.",
        "_ref" : {
          "_this": "Specify the source address from which you wish to retrieve transaction details.",
          "_list" : "source_address",
          "_sample" : "_dummyaddress_",
          "_ref" : {
            "_list" : "amount",
            "_sample" : "100",
            "_this" : "Specify the amount to retrieve transaction details for.",
            "_ref" : {
              "_list" : "target_address",
              "_sample" : "_dummyaddress_",
              "_this" : "Specify the target address to retrieve transaction details for.",
              "_ref" : {
                "_list" : "public_key",
                "_sample" : "_dummypublickey_",
                "_this" : "Optional: specify the public key (needed for certain cryptocurrencies, like NXT for example).",
                "_ref" : {
                  "_list" : "message",
                  "_sample" : "My transaction message",
                  "_this" : "Optional: specify a message to be send with the transaction."
                }
              }
            }
          }
        }
      },
      "block":{
        "_this" : "Get data from a block.",
        "_ref" : {
          "_list" : "block_number",
          "_sample" : "1",
          "_this": "Retrieve block information by specifying the block number. Omitting this input will return the latest block.",
          "_response": {"timestamp":"1515829438958","transactions":["0xe0cd97b697857b5a8e07f9208366511e212ef42e315bfb2f8ee5e473ac346695","0xa58e8947fbeb41dc92d8ee043e540ffcbac6b3df0db43d05c392b2ac5d4ad8d6"]}
        }
      },
      "confirm":{
        "_help" : "Get confirmation status.",
        "_ref" : {
          "_list" : "transaction_id",
          "_sample" : "0xe0cd97b697857b5a8e07f9208366511e212ef42e315bfb2f8ee5e473ac346695",
          "_this": "Retrieve the confirmation status for a given a transaction ID.",
          "_response": {"error":0,"info":"Process data.","id":"1519829794295742","progress":1,"started":1519829799292,"stopped":1519829799316,"data":true}
        }
      },
      "confirmed":{
        "_this" : "Get confirmation count. No input returns needed confirmations in general for the ledger.",
        "_ref" : {
          "_list" : "transaction_id",
          "_sample" : "0xe0cd97b697857b5a8e07f9208366511e212ef42e315bfb2f8ee5e473ac346695",
          "_this": "Retrieve the confirmation count for a given a transaction ID.",
          "_response": {"error":0,"info":"Process data.","id":"1519829794295742","progress":1,"started":1519829799292,"stopped":1519829799316,"data":"500"}
        }
      },
      "contract":{
        "_this" : "Get the contract unique identifier for a token asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519829634775083","progress":1,"started":1519829634775,"stopped":1519829634778,"data":"0xf230b790E05390FC8295F4d3F60332c93BEd42e2"}
      },
      "details":{
        "_this": "Retrieve detailed information of an asset.",
        "_response": {"fee":0.00011149,"factor":"8","contract":"undefined","symbol":"btc","name":"Bitcoin","mode":"bitcoinjslib.bitcoin","unified-symbols":"undefined","fee-symbol":"btc","fee-factor":"8","keygen-base":"btc","generated":"never"}
      },
      "factor":{
        "_this": "Retrieve the factor. The number of decimal digits used for this asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519829794292742","progress":1,"started":1519829794292,"stopped":1519829794316,"data":"18"}
      },
      "features":{
        "_this": "Retrieve available features for this asset.",
        "_ref" : {
          "_list": "feature",
          "_sample" : "message",
          "_this":"Check whether feature is enables for this asset."
        }

      },
      "fee":{
        "_this": "Retrieve the average transaction fee for sending an asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519830189432904","progress":1,"started":1519830189432,"stopped":1519830189437,"data":"0.000420000000000000"},
        "_ref": {
          "_list": "bytes",
          "_sample" : 32,
          "_this": "You may specify the amount of data bytes you intend to attach to the transaction. This may adjust the fee."
        }
      },
      "fee-factor":{
        "_this": "Retrieve the factor belonging to an asset's fee.",
        "_response": "8"
      },
      "fee-symbol":{
        "_this": "Retrieve the symbol in which the transaction fee is calculated.",
        "_response": "btc"
      },
      "keygen-base":{
        "_this": "Retrieve the base symbol used to generated the private and public keys of an asset.",
        "_response": "btc"
      },
      "mode":{
        "_this": "Retrieve the mode for proper initialization of deterministic code blobs on the client-side.",
        "_response": "bitcoinjslib.bitcoin"
      },
      "height" :  "Return the height of the asset ledger, denominated in its own measurable unit (e.g. blocks, parts or consensus decisions).",
      "history": {
        "_help": "Retrieve the transaction history for an asset.",
        "_ref": {
          "_list": "address",
          "_sample" : "_dummyaddress_",
          "_this": "Get the history belonging to an address on the ledger.",
          "_ref": {
            "_list": "count",
            "_sample" : "10",
            "_this": "Specify the amount of entries to return.",
            "_ref": {
              "_list": "offset",
              "_sample" : "0",
              "_this": "Specify the offset starting from the latest transaction.",
              "_ref": {
                "_list": "checkCache",
                "_access" : "root",
                "_sample": "false",
                "_this": "Specify whether to use any cached result."
              }
            }
          }
        }
      },
      "info" :  "Retrieve info about the asset.",
      "icon" :  "Retrieve the svg icon for this asset.",
      "notes" :  "Retrieve any notes for this asset.",
      "sample" : {
        "_this": "Retrieve a sample address and transaction id for test purposes.",
        "_response": {"address":"1J3St3rp3hVsuLGhegbLWicyPL3NRD3YJ7","transaction":"2c0832c153cf33327dae0e95a3bc39f4b02ae887725a32c07b1be47a2faffc55"}
      },
      "report" :  "Retrieve test results.",
      "test" : "Retrieve data used for testing.",
      "test-hosts" : {
        "_access":"root",
        "_this" : "Tests the hosts used for this asset"
      },
      "test-cli" : {
        "_access":"root",
        "_this" : "Tests the asset methods."
      },
      "transaction":{
        "_help" : "Get transaction information.",
        "_ref" : {
          "_list" : "transaction_id",
          "_sample" : "TX01",
          "_this": "Retrieve the details belonging to a transaction ID.",
          "_ref" : {
            "_list": "target",
            "_sample": "_dummyaddress_",
            "_this": "Specify a specific target address."
          }
        }
      },
      "message":{
        "_help" : "Get transaction attachment data, and decode its message.",
        "_ref" : {
          "_list" : "transaction_id",
          "_sample" : "TX01",
          "_this": "The message belonging to a transaction ID is decoded."
        }
      },
      "status":{
        "_help" : "Get status hash of an address. When the hash changes, a transaction has gone in or out.",
        "_ref" : {
          "_list" : "address",
          "_sample" : "_dummyaddress_",
          "_this": "Retrieve the status hash belonging to the history of an address."
        }
      },
      "push":{
        "_help":"Push a signed transaction to a blockchain, DAG or other ledger system.",
        "_ref" : {
          "_list" : "transaction",
          "_this":"Signed transaction data pushed into the network will return a transaction ID.",
          "_sample" : "_dummytransaction_100000000_15000000"
        }
      },
      "unified-symbols":{
        "_this": "Retrieve the unified symbols that form a hybrid asset.",
        "_response": ["eth","nxt","omni","waves","xcp","xem"]
      },
      "unspent": {
        "_help" : "Retrieve the unspents for an asset. Unspent is a bitcoin related term that in hybrixd is used for pre-transactional data. Bitcoin: 'unspent' means available inputs for creating a transaction. Ethereum: 'unspent' means the most recent nonce of the cryptocurrency account needed for constructing a transaction.  NXT: 'unspent' means the server reply information needed to construct a deterministic transaction.",
        "_ref" : {
          "_this": "Specify the source address from which you wish to calculate unspents.",
          "_list" : "source_address",
          "_sample" : "_dummyaddress_",
          "_ref" : {
            "_list" : "amount",
            "_sample" : "100",
            "_this" : "Specify the amount to calculate unspents for.",
            "_ref" : {
              "_list" : "target_address",
              "_sample" : "_dummyaddress_",
              "_this" : "Specify the target address to calculate unspents for.",
              "_ref" : {
                "_list" : "public_key",
                "_sample" : "_dummypublickey_",
                "_this" : "Optional: specify the public key (needed for certain cryptocurrencies, like NXT for example).",
                "_ref" : {
                  "_list" : "message",
                  "_sample" : "My transaction message",
                  "_this" : "Optional: specify a message to be send with the transaction."
                }
              }
            }
          }
        }
      },
      "validate":{
        "_ref" : {
          "_list" : "address",
          "_this":"Validate an address for this symbol.",
          "_sample" : "_dummyaddress_"
        }
      }
    }
  }
}
