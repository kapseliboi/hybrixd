{
  "engine":"eth-api",
  "name":"Ethereum compatible API engine",
  "info":"<p>Ethereum compatible is an open-source, public, blockchain-based distributed computing platform and operating system featuring smart contract (scripting) functionality. It supports a modified version of Nakamoto consensus via transaction-based state transitions.</p> <p>Ether is a token whose blockchain is generated by the Ethereum compatible platform. Ether can be transferred between accounts and used to compensate participant mining nodes for computations performed. Ethereum compatible provides a decentralized virtual machine, the Ethereum compatible Virtual Machine (EVM), which can execute scripts using an international network of public nodes. The virtual machine's instruction set, in contrast to others like Bitcoin Script, is thought to be Turing-complete. \"Gas\", an internal transaction pricing mechanism, is used to mitigate spam and allocate resources on the network.</p><a href=\"https://en.wikipedia.org/wiki/Ethereum\">https://en.wikipedia.org/wiki/Ethereum</a>",
  "APIkey":"",
  "cache":15000,
  "nonceCacheTime": 300,
  "throttle":1,
  "timeout":30000,
  "factor":18,
  "fee-factor":18,
  "fee-override":false,
  "confirmed":12,
  "fee":"0.0005",
  "feeContractTx":"0.0025",
  "gasPriceDefault":"0.000000035",
  "gasPerByte":625,
  "gasBaseUsage":21000,
  "gasErc20Usage":35000,
  "messageSeparatorBytes":3,
  "contract":"0x0000000000000000000000000000000000000000",
  "histPage":25,
  "import": "transaction-history",
  "historyThrottle": 0.2,
  "apiProvidesFullTx": false,
  "pushVerification": false,
  "quartz": {
    "init" : [
      "flow contract '0x0000000000000000000000000000000000000000' 1 @skipTokens",
      "peek gasPriceDefault",
      "poke local::gasPrice",
      "@skipTokens"
    ],
    "cron" : [
      "flow contract '0x0000000000000000000000000000000000000000' 1 @skipTokens",
      "call updateGasPrice",
      "@skipTokens"
    ],
    "updateGasPrice" : [
      "time 45000",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_gasPrice', params: [], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' @gasPriceOk",
      "fail 'Failed to get gas price for $symbol'",
      "@gasPriceOk",
      "flow '0x0' 1 2",
      "fail 'Received zero gas price for $symbol'",
      "code hex dec",
      "ship 2 1 1 1",
      "fail 'Gas price must be a positive number!'",
      "atom",
      "form ${fee-factor}",
      "poke local::gasPrice",
      "logs 'module ethereum: updating fee for asset $symbol. Current gasprice: $local::gasPrice'"
    ],
    "sample":[
      "done {address:'0x896a0b2b259d62fd27aeab05c81bb1897ecf767b',transaction:'0x5496d381d8b2c6ae028c69f90a643f1c453bbfd0381df9d0af0e20b09a04dadd'}"
    ],
    "getHistory/address/count=12/offset=0" : [
      "peek symbol",
      "flow {etc: @etc, eth: @eth, bsc: @eth} @other",
      "@etc",
      "poke token false",
      "poke etc true",
      "jump @start",
      "flow eth 1 @other",
      "@eth",
      "poke token false",
      "poke etc false",
      "jump @start",
      "@other",
      "take 0 4",
      "flow eth. 1 @fail",
      "poke token true",
      "poke etc false",
      "jump @start",
      "@fail",
      "fail 'Cannot retrieve history for non-Ethereum compatible asset or token.'",
      "@start",
      "time $timeout",
      "with pageOffset math 'floor($offset/$histPage)'",
      "with pages math 'floor($count/$histPage)'",
      "poke page '$pageOffset'",
      "poke resultArray []",
      "@countLoop",
      "test token 2 1",
      "curl ${host.history} ?module=account&action=txlist&address=$address&page=$page&offset=12&sort=desc&startblock=0&endblock=99999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'} {throttle:$historyThrottle} @parseResult @failHost",
      "curl ${host.history} ?module=account&action=tokentx&address=$address&contractaddress=$contract&page=$page&offset=12&sort=desc&startblock=0&endblock=999999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'} {throttle:$historyThrottle} @parseResult @failHost",
      "@parseResult",
      "flow .message {NOTOK: 1} 2",
      "fail ${.result}",
      "tran '.result' 2 1",
      "fail 'Ethereum compatible node returning unexpected result!'",
      "poke tempResultArray",
      "with resultArray [fuse,$tempResultArray]",
      "loop @countLoop 'page' '<=$pages'",
      "peek resultArray",
      "test etc 1 3",
      "sort 'desc' '.timestamp'",
      "jump 2",
      "sort 'desc' '.timeStamp'",
      "tran '[].hash' 2 1",
      "fail 'Cannot interpret history data!'",
      "uniq",
      "with offset [math,'$offset - ($histPage*$pageOffset)']",
      "take $offset $count",
      "done",
      "@failHost",
      "fail 'Could not connect to host'"
    ],
    "test" : [
      "done {hash:dynamic}"
    ],
    "push/signedTransaction":[
      "time $timeout",
      "@retryLoop",
      "rand 10000",
      "data {'jsonrpc': '2.0', 'method': 'eth_sendRawTransaction', 'params': ['$signedTransaction'], 'id': $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 1 3",
      "regx '^0x' 1 2 ",
      "jump @success",
      "tran '.error' 1 2",
      "fail",
      "warn 'module ethereum: bad RPC response \"$\", retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum compatible network not responding. Cannot push transaction!'",
      "@success",
      "poke transactionId",
      "#Try to retrieve transaction to see if it has been picked up",
      "test pushVerification @verify @return",
      "@verify",
      "wait 5000",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$transactionId'], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran .result.hash @return 1",
      "fail 'Could not verify is transaction was succcesfully pushed'",
      "@return",
      "call updateLocalNonce/$signedTransaction",
      "peek transactionId"
    ],
    "transactionData/transactionId" : [
      "time $timeout",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$transactionId'], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran .result @success @fail",
      "@fail",
      "tran .error.message @errormsg 1",
      "fail 'Cannot read transaction data!'",
      "@errormsg",
      "fail 'Error on Ethereum compatible network: $'",
      "@success",
      "have .blockNumber 1 @fail",
      "poke txData",
      "pack",
      "save 'tx$storageHash'",
      "peek txData",
      "done"
    ],
    "reformatTx/transactionId": [
      "poke txData",
      "with txGas [data,'${.gas}'] [code,'hex','dec']",
      "with txGasPrice [data,'${.gasPrice}'] [code,'hex','dec']",
      "peek symbol",
      "find '.' @sectionA",
      "with txFee [math,'$txGas*$txGasPrice'] [atom] [done]",
      "with txAmount [peek,'txData'] [tran,'=.amount|.value'] [code,'hex','dec'] [atom]",
      "with txTarget [peek,'txData'] [tran,'=.to']",
      "jump @sectionB",
      "@sectionA",
      "with fee-factor [call,'fee-factor']",
      "with txFee [math,'$txGas*$txGasPrice'] [atom,0,$fee-factor]",
      "call 'attachment/$transactionId'",
      "# TODO: we need more stringent checking for ERC type, than merely testing for empty!",
      "flow '0x' @notTokenTx",
      "with txTarget [data,'$'] [pick,34,74] [push,'0x',0]",
      "with txAmount [data,'$'] [pick,102,138] [code,'hex','dec'] [atom]",
      "@sectionB",
      "peek txData",
      "with txHeight [data,'${.blockNumber}'] [code,'hex','dec']",
      "with fee-symbol [call,'fee-symbol']",
      "with timestamp [call,'blockRaw/${.blockNumber}'] [tran,'.result.timestamp',2,1] [fail] [code,'hex','dec'] [done]",
      "tran { id:'=.hash', timestamp:'$timestamp', height:'$txHeight', amount:'$txAmount', symbol:'$symbol', fee:'$txFee', 'fee-symbol':'$fee-symbol', source:'.from', target:'$txTarget' } @okayData @failData",
      "@failData",
      "fail 'Cannot interpret transaction data!'",
      "@notTokenTx",
      "fail 'This is a native, and not token transaction!'",
      "@okayData",
      "done"
    ],
    "getTransaction/transactionId" : [
      "time $timeout",
      "call 'transactionData/$transactionId'",
      "call 'reformatTx/$transactionId'",
      "test fee-override 1 2",
      "with .fee [peek,fee-override] [form,$fee-factor]"
    ],
    "getConfirmed/transactionId" : [
      "call transactionData/$transactionId",
      "tran .blockNumber 1 @failed",
      "code hex dec",
      "poke txHeight",
      "call height",
      "void 'false' @failed 1",
      "math '-$txHeight'",
      "done",
      "@failed",
      "fail 'Cannot get confirmations!'"
    ],
    "attachment/transactionId" : [
      "time $timeout",
      "call 'transactionData/$transactionId'",
      "tran '.input' 2 1",
      "done null",
      "done"
    ],
    "message/transactionId" : [
      "time $timeout",
      "call 'attachment/$transactionId'",
      "code hex utf8",
      "done"
    ],
    "status/address" : [
      "call history/$address/3/0",
      "join",
      "hash sha256"
    ],
    "blockRaw/blockId" : [
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBlockByNumber', params: ['$blockId',false], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Error when not querying host!'",
      "done"
    ],
    "block/blockId" : [
      "peek blockId",
      "void 1 3",
      "data 'latest'",
      "jump @getRawBlock",
      "indx '0x'",
      "flow -1 1 5",
      "peek blockId",
      "code dec hex",
      "push '0x' 0",
      "jump @getRawBlock",
      "peek blockId",
      "@getRawBlock",
      "call blockRaw/$",
      "tran .result",
      "done"
    ],
    "height" : [
      "call block",
      "tran .number 2 1",
      "fail 'Cannot get height!'",
      "code hex dec",
      "done"
    ],
    "balance/address" : [
      "time 45000",
      "@retryLoop",
      "data $symbol",
      "find '.' @token 1",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$address','latest'], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "jump @transform",
      "@token",
      "func encode/$address",
      "poke encoded",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_call', params: [{to:'$contract',data:'$encoded'},pending], id: $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "@transform",
      "tran .result 1 @failure",
      "regx '^0x' 1 @failure",
      "code 'hex' 'dec'",
      "atom",
      "form",
      "done",
      "@failure",
      "warn 'module ethereum: bad RPC response \"$\", retrying request...'",
      "wait 1500",
      "loop @retryLoop retries '<9' '1'",
      "fail 'Error: Ethereum compatible network not responding. Cannot get balance!'"
    ],

    "updateLocalNonce/signedTransaction":[
      "rout /e/evm-interpreter/decode/$signedTransaction",
      "tran {nonce:.nonce,source:.source} 2 1",
      "done",
      "with timestamp [date,now] [math,round]",
      "poke local::nonces[${.source}] {nonce:${.nonce},timestamp:$timestamp}"
    ],
    "compareLocalNonce/source":[
      "poke retrievedNonce",
      "have local::nonces[$source] 2 1",
      "done",
      "peek local::nonces[$source]",
      "poke {nonce:nonce, timestamp:timestamp}",
      "date now",
      "true '$timestamp+$nonceCacheTime>$' 2 1",
      "done $retrievedNonce",
      "math max($nonce+1,$retrievedNonce)"
    ],
    "unspent/source/amount/target/publicKey" : [
      "call unspentData/$source/$amount/$target/$publicKey"
    ],
    "unspentData/source/amount/target/publicKey" : [
      "with nativeBalance rout /a/${fee-symbol}/balance/$source",
      "with tokenFee [call,fee] [ship,2,1,1,1] [done,$feeContractTx]",
      "true '$nativeBalance > $tokenFee' @enoughBalance 1",
      "with msgSymbol [peek,fee-symbol] [case,upper]",
      "fail 'Not enough $msgSymbol balance on account to pay transaction fee! Balance needed is $tokenFee $msgSymbol, while available only $nativeBalance $msgSymbol.'",
      "@enoughBalance",
      "call getGasPrice",
      "ship 2 1 1 1",
      "fail 'Gas price currently unknown or calculated at zero!'",
      "poke gasPrice",
      "@retryLoop",
      "rand 1000",
      "data {'jsonrpc': '2.0', 'method': 'eth_getTransactionCount', 'params': ['$source','pending'], 'id': $}",
      "curl POST {api-key:$APIkey, 'Content-Type':'application/json'} {host:'unspent'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 1 @fail",
      "code hex dec",
      "call compareLocalNonce/$source",
      "poke nonce",
      "#TODO message fee",
      "call estimateGasUsage",
      "done {'nonce':'$nonce', gasUsage: '$', gasPrice:'$gasPrice'}",
      "@fail",
      "warn 'module ethereum: bad RPC response \"$\", retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum compatible network not responding. Cannot get nonce!'"
    ],
    "estimateGasUsage/message":[
      "flow contract '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "flow message undefined @nativeNoMessage @nativeWithMessage",
      "@nativeWithMessage",
      "peek message",
      "ship 2 2 2 1",
      "size",
      "math '$gasBaseUsage+round( $gasPerByte * $ )'",
      "done",
      "@nativeNoMessage",
      "done $gasBaseUsage",
      "@token",
      "flow message undefined @tokenNoMessage @inputCalcToken",
      "@tokenNoMessage",
      "math '$gasBaseUsage+$gasErc20Usage'",
      "done $",
      "@inputCalcToken",
      "peek message",
      "ship 3 3 3 1",
      "rout '/engine/evm-interpreter/get/gas/$'",
      "done",
      "math 'round( $gasBaseUsage+$gasErc20Usage+($gasPerByte * ($ + $messageSeparatorBytes)) )'",
      "done"
    ],
    "getGasPrice" : [
      "flow contract '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "peek local::gasPrice",
      "ship 2 1 1 1",
      "fail 'Gas price not initialized!'",
      "done",
      "@token",
      "peek symbol",
      "splt .",
      "pick",
      "rout '/asset/$/fee'",
      "ship 2 1 1 1",
      "fail 'Gas price not initialized!'",
      "math '$/$gasBaseUsage'",
      "form ${fee-factor}"
    ],
    "fee/message":[
      "test fee-override 1 @useDefaultFee",
      "peek fee-override",
      "jump @finalize",
      "@useDefaultFee",
      "call estimateGasUsage/$message",
      "poke gasUsageEstimation",
      "call getGasPrice",
      "math '$ * $gasUsageEstimation'",
      "@finalize",
      "form ${fee-factor}"
    ]
  }
}
