{
  "engine":"nownodes",
  "name":"NowNodes HTTP(S) engine",
  "documentation" : "https://documenter.getpostman.com/view/13630829/TVmFkLwy",
  "APIkey": "",
  "cache":1000,
  "import": "transaction-history",
  "apiProvidesFullTx": false,
  "throttle":0.2,
  "timeout":24000,
  "longTimeout":60000,
  "shortTimeout":15000,
  "factor":8,
  "fee":0,
  "feePerByte":0,
  "confirmsRequired":6,
  "prefix":"",
  "utxo_unspent_prefix":"76a914",
  "utxo_unspent_suffix":"88ac",
  "trimAddrHexL":"2",
  "trimAddrHexR":"8",
  "cron":600,
  "quartz":{
    "balance/address" : [
      "with address [regx,'^$prefix',2,1] [done] [splt,':'] [pick,-1]",
      "time $timeout",
      "curl {api-key:$APIkey} /api/v2/address/$prefix$address 2 1",
      "fail 'Connection to host failed'",
      "tran .balance 2 1",
      "fail 'Result from host invalid'",
      "atom"
    ],
    "unspent/source/amount/target/publicKey/message" : [
      "with source [regx,'^$prefix',2,1] [done] [splt,':'] [pick,-1]",
      "data $amount",
      "ship @amountSpecified @amountSpecified 1 1",
      "call unspentAll/$source",
      "done",
      "@amountSpecified",
      "with target [regx,'^$prefix',2,1] [done] [splt,':'] [pick,-1]",
      "poke inputval '$amount' '1000000000000'",
      "with inputval atom 1",
      "time $timeout",
      "curl {api-key:$APIkey} /api/v2/utxo/$prefix$source?confirmed=true 2 1",
      "fail 'Could not connect to host'",
      "tran []{script:.scriptPubKey,amount:=.value,txid:.txid,txn:.vout} 2 1",
      "fail 'Parsing failed for unspents'",
      "sort '.amount'",
      "scan 'cnt<($inputval+val.amount)' '+val.amount'",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "math '-$inputval'",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],
    "unspentAll/source" : [
      "data '1000000000000'",
      "poke inputval",
      "time $timeout",
      "curl {api-key:$APIkey} /api/v2/utxo/$source?confirmed=true 2 1",
      "fail 'Could not connect to host'",
      "tran []{script:.scriptPubKey,amount:=.value,txid:.txid,txn:.vout} 2 1",
      "fail 'Could not parse unspents'",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],
    "push/transaction" : [
      "time $timeout",
      "curl {api-key:$APIkey} /api/v2/sendtx/$transaction @curlSuccess @curlFail",
      "@curlFail",
      "fail 'Could not connect to host: $.'",
      "@curlSuccess",
      "tran .result 2 1",
      "fail 'Bad transaction result. $'",
      "done"
    ],
    "transactionData/txId" : [
      "curl {api-key:$APIkey} /api/v2/tx/$txId 2 1",
      "fail 'Could not connect to host'"
    ],
    "reformatTx" : [
      "tran .value 2 1",
      "fail 'Could not parse transaction'",
      "with vout [data,${.vout}] [filt,.isAddress,true]",
      "with spends [data,$vout] [tran,[][.addresses, =atom(.value)]] [type,object]",
      "with sources [data,${.vin}] [filt,.isAddress,true] [tran,[].addresses] [flat] [uniq]",
      "with source [data,$sources] [join,',']",
      "with targets [data,${.vout}] [tran,[].addresses] [flat] [uniq]",
      "with target [data,$targets] [excl,$sources,true] [void,'empty',1,2] [data,$targets] [join,',']",
      "with timestamp [data,${.blockTime}] [true,==0,1,2] [data,${.coinSpecificData.blocktime}]",
      "ship timestamp 2 1 1 1",
      "fail 'Transaction not yet mined - timestamp: $timestamp'",
      "with txAmount [data,$spends] [each,transactionValueFilter/$sources] [flat] [pick,-1] [math,'+']",
      "flow target '$source' 1 @skipSelfTarget",
      "with txValue [data,${.value}] [atom,false,$factor]",
      "with txPlus [data,$spends] [flat] [pick,-1] [math,'+']",
      "with txAmount [math,'$txValue - $txPlus']",
      "@skipSelfTarget",
      "tran { id:.txid, timestamp: $timestamp, amount: '$txAmount', symbol:'$symbol', fee:.fees, 'fee-symbol':'${fee-symbol}', source:'$source', target:'$target', confirmed:.confirmations, spends:$spends} 2 1",
      "fail 'Failed to transform transaction data'",
      "with .fee atom false $factor",
      "with .amount form"
    ],
    "transactionValueFilter/sources" : [
      "poke key ${.key}",
      "poke value ${.value}",
      "peek sources",
      "excl $key false @zero 1",
      "done $value",
      "@zero",
      "done '0'"
    ],    
    "getTransaction/txId" : [
      "time $timeout",
      "call transactionData/$txId",
      "data {value:$}",
      "call reformatTx"
    ],
    "parseOpReturn/content":[
      "tran .value",
      "regx '^OP_RETURN \\(.*\\)$$' 2 1",
      "done ''",
      "drop 11 1"
    ],
    "message/txId" : [
      "call transactionData/$txId",
      "peek .vout",
      "filt .isAddress false",
      "tran [].addresses",
      "flat",
      "each parseOpReturn",
      "join"
    ],
    "getHistory/address/count=12/offset=0" : [
      "with address [regx,'^$prefix',2,1] [done] [splt,':'] [pick,-1]",
      "#Some logic to efficiently convert count,offset to page,pageSize",
      "true '$offset%$count==0' @straightforward @complex",
      "@straightforward",
      "poke pageSize $count",
      "poke drop 0",
      "with page math '$offset/$count'",
      "jump @curl",
      "@complex",
      "true '$offset<$count*2' 1 @largeOffset",
      "with pageSize math '$count+$offset'",
      "poke page 0",
      "poke drop $offset",
      "jump @curl",
      "@largeOffset",
      "with pageSize math '$count * 2'",
      "with page math 'floor($offset/($count*2))'",
      "with drop math '$offset%($count*2)'",
      "@curl",
      "with start math '$page*$pageSize'",
      "with end math '($page+1)*${pageSize}-1'",
      "curl {api-key:$APIkey} /api/v2/address/$prefix$address?page=$page&pageSize=$pageSize&details=txids 2 1",
      "fail 'Could not connect to host'",
      "tran .txids",
      "drop $drop",
      "head $count"
    ],
    "fee/message" : [
      "poke opreturnFee 0",
      "data $message",
      "void @finalize 1",
      "data '$message'",
      "ship 2 2 2 1",
      "size",
      "math '$*$feePerByte'",
      "poke opreturnFee",
      "@finalize",
      "peek local::fee $fee",
      "math '$+$opreturnFee'",
      "flow 'null' 1 2",
      "data '$fee'",
      "@feeDone"
    ],
    "sample" : [
      "done {address:'1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX',transaction:'2c0832c153cf33327dae0e95a3bc39f4b02ae887725a32c07b1be47a2faffc55'}"
    ],
    "cron" : [
      "data '$symbol'",
      "flow 'undefined' 2 1",
      "call 'getFee'",
      "done"
    ],
    "getFee" : [
      "time $timeout",
      "with rId rand 10000",
      "data {API_key:'$APIkey',id:'$rId',method:'estimatesmartfee','params':[99]}",
      "curl / {Content-Type: 'application/json'} POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.feerate' 2 1",
      "done",
      "# Raising the fee: we want our transaction to be mined within 30 minutes!",
      "math '*5'",
      "poke local::fee",
      "math '/100'",
      "poke local::feePerByte",
      "done"
    ]
  }
}
