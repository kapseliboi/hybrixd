{
  "engine":"electrum-tcp",
  "name":"Electrum TCP engine",
  "module":"quartz",
  "cache":1000,
  "import": "transaction-history",
  "apiProvidesFullTx": false,
  "throttle":0.2,
  "timeout":60000,
  "longtimeout":90000,
  "factor":8,
  "fee":0,
  "feePerByte":0,
  "confirmsRequired":6,
  "utxo_unspent_prefix":"76a914",
  "utxo_unspent_suffix":"88ac",
  "trimAddrHexL":"2",
  "trimAddrHexR":"8",
  "cron":600,
  "quartz":{
    "unspent" : [
      "data $2",
      "void 1 3",
      "call unspentAll/$1",
      "done",
      "poke inputval '$2' '1000000000000'",
      "with inputval atom 1",
      "data '$1'",
      "code base58 hex",
      "drop $trimAddrHexL $trimAddrHexR",
      "data '$utxo_unspent_prefix.${data}.$utxo_unspent_suffix'",
      "excl '.'",
      "poke script",
      "time $longtimeout",
      "rand 10000",
      "data {'jsonrpc':'2.0','id':$,'method':'blockchain.address.listunspent','params':['$1']}",
      "curl {} {'timeout':$timeout} 2 1" ,
      "fail 'Could not connect to host'",
      "tran '.result' 2 1",
      "fail 'Bad input unspents from Electrum!'",
      "tran []{script:$script,amount:=.value|0,txid:.tx_hash,txn:.tx_pos}",
      "sort asc '.amount'",
      "scan 'cnt<($inputval+val.amount)' '+val.amount'",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "math '-$inputval'",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],

    "unspentAll" : [
      "data '$1'",
      "code base58 hex",
      "drop $trimAddrHexL $trimAddrHexR",
      "data '$utxo_unspent_prefix.${data}.$utxo_unspent_suffix'",
      "excl '.'",
      "poke script",
      "time $longtimeout",
      "rand 10000",
      "data {'jsonrpc':'2.0','id':$,'method':'blockchain.address.listunspent','params':['$1']}",
      "curl {} {'timeout':$timeout} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 2 1",
      "fail 'Bad input unspents from Electrum!'",
      "tran []{script:$script,amount:=.value|0,txid:.tx_hash,txn:.tx_pos}",
      "poke 'selected'",
      "tran '[].amount' 2 1",
      "data []",
      "math '+'",
      "with inputval [flow,'100000000000000000000',1,2] [done,'$'] [done]",
      "ship 2 2 1",
      "data 0",
      "done {unspents:$selected,change:'$'}"
    ],

    "balance" : [
      "time $timeout",
      "rand 10000",
      "data {'jsonrpc':'2.0','id':$,'method':'blockchain.address.get_balance','params':['$1']}",
      "curl 2 1",
      "fail 'Could not connect to host'",
      "tran {confirmed:'.result.confirmed',unconfirmed:'.result.unconfirmed'} 3 1",
      "data 0",
      "jump 3",
      "time $cache",
      "math '${.confirmed}+${.unconfirmed}'",
      "atom"
    ],
    "push" : [
      "time $timeout",
      "rand 10000",
      "data {'jsonrpc':'2.0','id':$,'method':'blockchain.transaction.broadcast','params':['$1']}",
      "curl 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 4 1",
      "tran('.error',1,2)",
      "fail ${.message}",
      "fail 'Bad transaction result!'"
    ],
    "transactionData" : [
      "time $longtimeout",
      "rand 10000",
      "data {jsonrpc:'2.0',id:$,method:'blockchain.transaction.get',params:['$1',true]}",
      "curl {} {retry:15,timeout:$timeout} 2 1",
      "fail 'Could not connect to host'",
      "tran .result 2 1",
      "fail 'Could not read transaction data!'"
    ],
    "getTransaction" : [
      "time $longtimeout",
      "call transactionData/$1",
      "# calculate fee",
      "poke txOutData",
      "tran '.vin[0].vout' 1 @failed",
      "poke txVoutN",
      "peek txOutData",
      "tran '.vin[0].txid' 1 @failed",
      "call transactionData/$",
      "poke txInData",
      "# determine input and output targets",
      "tran '.vout[$txVoutN].scriptPubKey.addresses[0]' 1 @failed",
      "poke txChangeAddress",
      "data {out:$txOutData,in:$txInData,excl:'$txChangeAddress'}",
      "call transactionTargets",
      "poke txAddr",
      "# calculate transact value",
      "data ${txOutData.vout}",
      "each transactionValueFilter/$txSources",
      "math '+'",
      "poke txTransactValue",
      "# calculate spent value",
      "data ${txOutData.vout}",
      "each transactionValueFilter/$txChangeAddress",
      "math '+'",
      "poke txSpentValue",
      "# calculate inputs value",
      "data ${txInData.vout}",
      "each transactionValueFilter/$txTargets",
      "math '+'",
      "poke txInputsValue",
      "# calculate overflow value",
      "data ${txInData.vout}",
      "each transactionValueFilter/$txChangeAddress",
      "math '+'",
      "poke txOverflowValue",
      "# calculate change value",
      "math '$txTransactValue - $txSpentValue'",
      "poke txChangeValue",
      "# calculate fee value",
      "math '$txInputsValue - $txTransactValue - $txOverflowValue'",
      "# transactions without change value need a different fee calculation",
      "true '>0' @finalizeFee 1",
      "poke txSpentValue '$txTransactValue'",
      "math '$txInputsValue - $txTransactValue'",
      "@finalizeFee",
      "math abs",
      "poke txFeeValue",
      "# construct the transaction data",
      "with feeSymbol [have,fee-symbol,1,2] [done,'$fee-symbol'] [done,'$symbol']",
      "peek txOutData",
      "tran { id:'.txid', timestamp:'=.time|.locktime|null', height:null, amount:'$txSpentValue', symbol:'$symbol', fee:'$txFeeValue', 'fee-symbol':'$feeSymbol', source:'${txAddr.sources}', target:'${txAddr.targets}', confirmed:'=.confirmations|0' } @success @failed",
      "@failed",
      "fail 'Cannot interpret transaction data!'",
      "@success",
      "done"
    ],
    "transactionValueFilter" : [
      "time $timeout",
      "poke txValue 0",
      "with exclude [data,$1] [splt,',']",
      "poke txData ${.value}",
      "peek txData",
      "tran '.scriptPubKey.addresses[0]' 1 @zero",
      "poke txTmpAddr",
      "peek exclude",
      "excl $txTmpAddr false @zero 1",
      "peek txData",
      "tran '.value' 1 @zero",
      "done '$'",
      "@zero",
      "done '0'"
    ],
    "transactionTargets" : [
      "time $timeout",
      "poke txData",
      "tran '.excl'",
      "poke exclude",
      "peek txData",
      "tran '.out.vout' 2 1",
      "fail Could not parse out vout",
      "poke txTargets",
      "with txTargets [tran,'[].scriptPubKey.addresses[0]',2,1] [data,null]",
      "with txTargets [excl,null] [excl,'$exclude'] [uniq]",
      "peek txData",
      "tran '.in.vout' 2 1",
      "fail Could not parse in vout",
      "poke txSources",
      "with txSources [tran,'[].scriptPubKey.addresses[0]',2,1] [data,null]",
      "with txSources [excl,null] [excl,$txTargets] [uniq]",
      "with txSources [join,',']",
      "with txTargets [join,',']",
      "data {'sources':'$txSources','targets':'$txTargets'}",
      "done"
    ],
    "attachment" : [
      "time $longtimeout",
      "call transactionData/$1",
      "tran .vout 1 @empty",
      "jstr",
      "splt 'OP_RETURN '",
      "pick 1",
      "splt '\"'",
      "tran '[0]' 2 @empty",
      "@empty",
      "data null"
    ],
    "message" : [
      "time $longtimeout",
      "call attachment/$1",
      "data '$'",
      "flow 'null' 1 2",
      "done ''",
      "code hex utf8"
    ],
    "getHistory" : [
      "poke count $2 12",
      "poke offset $3 0",
      "time $longtimeout",
      "rand 10000",
      "data {jsonrpc:'2.0',id:$,method:'blockchain.address.get_history',params:['$1']}",
      "curl {} {retry:15,timeout:$timeout,cache:5000} 2 1",
      "fail 'Could not retrieve history + $'",
      "tran '.result' 1 -1",
      "sort 'desc' '.height'",
      "tran '[].tx_hash'",
      "with txs [data, $] [take, $offset] [head, $count]",
      "done $txs"
    ],
    "status" : [
      "time $timeout",
      "rand 10000",
      "data {jsonrpc:'2.0',id:$,method:'blockchain.address.subscribe',params:['$1']}",
      "curl {} {retry:15,timeout:$timeout,cache:1000} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 2 @failStatus",
      "data null",
      "poke firstHash",
      "wait 2000",
      "rand 10000",
      "data {jsonrpc:'2.0',id:$,method:'blockchain.address.subscribe',params:['$1']}",
      "curl {} {retry:15,timeout:$timeout,cache:1000} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 2 @failStatus",
      "poke secondHash",
      "excl $firstHash false 3 1",
      "data ['$secondHash']",
      "jump 2",
      "data ['$firstHash','$secondHash']",
      "join",
      "hash sha256",
      "jump @done",
      "@failStatus",
      "fail 'Cannot get status information!'",
      "@done"
    ],
    "sample" : [
      "done {address:'1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX',transaction:'b4132e9dcaf7899baf66bc86ad065def10e5df8b4bc13f93bf778c22d14ba5cd'}"
    ],
    "test" : [
      "time $longtimeout",
      "data {jsonrpc:'2.0',id:$,method:'blockchain.transaction.get_merkle',params:['$1']}",
      "curl {} {retry:15,timeout:$timeout} 2 1",
      "fail 'Could not connect to host'",
      "done"
    ],
    "fee" : [
      "poke opreturnFee 0",
      "data $1",
      "void @finalize 1",
      "data '$1'",
      "ship 2 2 2 1",
      "size",
      "math '$*$feePerByte'",
      "poke opreturnFee",
      "@finalize",
      "peek local::fee $fee",
      "math '$+$opreturnFee'",
      "flow 'null' 1 2",
      "data '$fee'",
      "@feeDone"
    ],
    "cron" : [
      "data '$symbol'",
      "flow 'undefined' 2 1",
      "call 'getFee'",
      "done"
    ],
    "getFee" : [
      "time $timeout",
      "rand 10000",
      "data {'jsonrpc':'2.0','id': $, 'method': 'blockchain.estimatefee', 'params': ['$confirmsRequired'] }",
      "curl 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 1 3",
      "ship 1 2 2 2",
      "poke local::fee",
      "data '$local::feePerByte'",
      "flow '0' 1 2",
      "math '$local::fee/100'",
      "poke local::feePerByte",
      "done"
    ]
  }
}
